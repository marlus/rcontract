<%= select :contract_type, :contract_category_id,
       ContractCategory.find(:all).collect {|c| [ c.name, c.id ] },
       { :include_blank => true } %>
<script>
  var contract_type_form_items = [
	{ 
		fieldLabel:    'Categoria',
		xtype:         'combo',
		triggerAction: 'all',
		typeAhead:      true,
		forceSelection: true,
		transform:     'contract_type_contract_category_id',
		lazyRender:     true
	},
	{
		fieldLabel:    'Documento',
		xtype:         'textfield',
		name:		   'contract_type[document]',
		allowBlank:	   'false',
		width:         250
	},
	{
		xtype:         'hidden',
		name:		   'contract_type[fields]',
		value: 		   'teste Hidden'
	}	
  ];

	    function formatDate(value){
	        return value ? value.dateFormat('M d, Y') : '';
	    };
	    // shorthand alias
	    var fm = Ext.form;

	    // custom column plugin example
	    var checkColumn = new Ext.grid.CheckColumn({
	       header: "Obrigat√≥rio?",
	       dataIndex: 'obrigatorio',
	       width: 85
	    });

	    // the column model has information about grid columns
	    // dataIndex maps the column to the specific data field in
	    // the data store (created below)
	    var cm = new Ext.grid.ColumnModel([{
	           id:'nome_campo',
	           header: "Nome do campo",
	           dataIndex: 'nome_campo',
	           width: 220,
	           editor: new fm.TextField({
	               allowBlank: false
	           })
	        },{
	           header: "Tipo do campo",
	           dataIndex: 'tipo_campo',
	           width: 130,
	           editor: new Ext.form.ComboBox({
	               typeAhead: true,
	               triggerAction: 'all',
	               transform:'tipo_campo',
	               lazyRender:true,
	               listClass: 'x-combo-list-small'
	            })
	        },
	        checkColumn
	    ]);

	    // by default columns are sortable
	    cm.defaultSortable = true;

	    // this could be inline, but we want to define the Plant record
	    // type so we can add records dynamically
	    var Plant = Ext.data.Record.create([
	           // the "name" below matches the tag name to read, except "availDate"
	           // which is mapped to the tag "availability"
	           {name: 'nome_campo', type: 'string'},
	           {name: 'tipo_campo'},
	           {name: 'obrigatorio', type: 'bool'}
	      ]);

		//create dados
		//var myData = { 'rows': [{ 'nome_campo': 'Novo Campo', 'tipo_campo': 'Texto', 'obrigatorio': true }] };
		var myData = "";
		
	    var store = new Ext.data.Store({
			 proxy: new Ext.data.MemoryProxy(myData),
	         reader: new Ext.data.JsonReader({root: "rows"}, Plant)
	         });



	    // trigger the data store load
	    store.load();

		var idGrid = 0;

	    // create the editor grid
	    var grid = new Ext.grid.EditorGridPanel({
	        store: store,
	        cm: cm,
	        width:600,
	        height:300,
	        autoExpandColumn:'nome_campo',
	        //title:'Edit Plants?',
	        frame:true,
	        plugins:checkColumn,
	        clicksToEdit:1,
			datachanged : this,
	        tbar: [{
	            text: 'Adicionar Campo',
				iconCls:'add',
	            handler : function(){
	                var p = new Plant({
	                    nome_campo: 'Novo Campo',
	                    tipo_campo: 'Texto',
	                    obrigatorio: true
	                });
	                grid.stopEditing();
	                store.insert(0, p);
	                grid.startEditing(0, 0);
					store.load();	
	            }
	        }]
	    });

	store.reload();

	//Adiciona na 3 posicao do array o Panel
	contract_type_form_items[3] = grid;

</script>

<select name="tipo_campo" id="tipo_campo" style="display: none;">
	<option value="Data">Data</option>
	<option value="Texto">Texto</option>
	<option value="Caracter">Caracter</option>
	<option value="Arquivo">Arquivo</option>
</select>

<script>
	Ext.onReady(function(){

	              Ext.QuickTips.init();

	              // turn on validation errors beside the field globally
	              Ext.form.Field.prototype.msgTarget = 'side';

	              //var panel = new Ext.FormPanel({
	              panel = new Ext.FormPanel({
	                  labelWidth:   75, // label settings here cascade unless overridden
	                  url:          '/contract_types',
	                  frame:         true,
	                  waitMsgTarget: true,
	                  title:         'Inserir Tipo de Contrato',
	                  bodyStyle:     'padding:5px 5px 0',
	                  defaultType:   'textfield',
	                  renderTo:      'contract_type-form',
	                  items: contract_type_form_items,
	                  buttons: [ {  
								text: 'Salvar',  
								type: 'submit',  
								handler: function()
								{ 
									//for (key in store.data.fields) {
									    //store.data.items[key];
									//	alert('key -> ' + store.data.items[key]);
									//}
									//return false;
									//alert("Total: " + store.length + " teste: " + store.getAt(0).data.nome_campo);
									key = 0;
									var campos_contrato = "";
									store.each(function(record) 
									{ 
										campos_contrato +=  store.getAt(key).data.nome_campo + ":" + store.getAt(key).data.tipo_campo + ":" + store.getAt(key).data.obrigatorio + ",";
										//TODO - adicionar o campo obrigatorio.
										//store.getAt(key).data.obrigatorio)
										key++;
									});
									
									//Adiciona no campo fields os valores do grid
									panel.getForm().setValues([{
										"value": campos_contrato, 
										"id": "contract_type[fields]"
									}]);
									
									
									panel.getForm().submit(
										{
											url:'/contract_types?format=ext_json', 
											waitMsg:'Saving...', 
											params: 
											{
												tabId: '5', 
												tabTitle : 'Inserir Tipo de Contrato'
											}
										}); 
									}
								},
	                            {  
									text: 'Cancelar',  
									handler: function()
									{ 
										panel.suspendEvents(); 
										parent.updateTab('5', 'Inserir Tipo de Contrato', '/contract_types'); 
									}
								}
	                           ]
	              });

	              // populate form values
	              panel.getForm().setValues([
									{
										"value": null, 
										"id": "contract_type[updated_at]"
									}, 
									{
										"value": null, 
										"id": "contract_type[fields]"
									}, 
									{
										"value": null, 
										"id": "contract_type[document]"
									}, 
									{
										"value": null, 
										"id": "contract_type[contract_category_id]"
									}, 
									{
										"value": null, 
										"id": "contract_type[created_at]"
									}
									]);
	          });
	
	
</script>




