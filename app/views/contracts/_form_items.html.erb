<%= select :contract_category, :contract_category_id,
       ContractCategory.find(:all).collect {|c| [ c.name, c.id ] },
       { :include_blank => true } %>
<script>
	var typeStore = new Ext.data.JsonStore({
		url: '/contract_types/list_types/',  
		fields: [
			{name: 'id'},
			{name: 'document'}
		]
	});
	
	fieldsStore = new Ext.data.JsonStore({
		url: '/contract_types/list_fields/',  
		fields: [
			{name: 'fields'}
		]
	});
	
	//Id usado para editar o contrato
	var id = '<%=params["id"]%>';
	
	var <%= "#{form_items}" %> = [
		{ 
			id:			   'contractCategory',
			fieldLabel:    'Categoria',
			xtype:         'combo',
			triggerAction: 'all',
			typeAhead:      true,
			forceSelection: true,
			grow: true,
			editable: 		false,
			transform:     'contract_category_contract_category_id',
			lazyRender:     true,
			listeners: {
				select: {
					fn:function()
					{
						var contractCategory = this;
						var contractType  = Ext.getCmp('contract_type_id');

						//Remove o panel com os campos
						unLoadFields();
						
						//Carrega a segunda combo.
						contractType.setValue('');
						contractType.reset();
						contractType.setDisabled(false);
						contractType.store.load({params: ("id=" + contractCategory.value)});

					}
				}
			}
		},
		{ 
			id: 		   'contract_type_id',
			fieldLabel:    'Tipo',
			xtype:         'combo',
			triggerAction: 'all',
			typeAhead:      true,
			forceSelection: true,
			width: 			350,
			grow: 			true,
			editable: 		false,
			mode: 			'local',
			valueField:		'id',
			displayField:	'document',
			store:			typeStore,
			listeners: {
				select: {
					fn:function()
					{
						//Valor do contractType
						var contract_type_hidden = this.value;
						
						//Remove o panel com os campos
						unLoadFields();
						
						//Carrega o panel com os campos
						fieldsStore.load({
							params: ("id=" + this.value),
							callback: function(records,o,s){
								//Obtem os registros do campo
								var fields = records[0].get('fields');
								if (fields.length > 0)
								{
									loadFields(fields, contract_type_hidden);
								}
							}
						});
					}
				}
			}
		},
	    { 
		  fieldLabel:    'Vencimento',
		  name:          'contract_end_date',
	      xtype:         'datefield',
		  allowBlank:    'false'
	    },
		{
		  fieldLabel:    'Arquivo',
		  name:          'file',
		  inputType:     'file'
		}
	];

	function loadFields(fields, contract_type_hidden){	
		//Cria outro FormPanel e o adiciona no FormPanel antigo
		panelFields = new Ext.Panel({
		  id:			 'panelFields',
		  frame:          true,
		  waitMsgTarget:  true,
		  bodyStyle:     'padding:5px 5px 0',
		  layout:		 'table',
		  layoutConfig: {
				columns: 2
		    }
		});

		var fieldsTokens = fields.split( "," );

		for ( var i = 0; i < fieldsTokens.length; i++ )
		{		
			if (fieldsTokens[i] != "")
			{
				var fieldsTokensTypes = fieldsTokens[i].split( ":" );
				var fieldName = fieldsTokensTypes[0];
				var fieldType = fieldsTokensTypes[1];
				var fieldAllowBlank = (fieldsTokensTypes[2] == 'true') ? false : true;
			
				label = new Ext.form.Label({
					text:    fieldName + ": ",
					cls: 	 'x-form-item'
				});
			
				if (fieldType == 'Data')
				{
					var componentField = new Ext.form.DateField({
						name:		   	'contract[' + fieldName + '_data]',
						id:		   	    'field_' + fieldName,
						allowBlank:		fieldAllowBlank,
						style: 		  	'margin-bottom:4px'
					});			
				}
				else if (fieldType == 'Arquivo')
				{					
					var componentField = new Ext.form.TextField({
						name:  		'contract[' + fieldName + '_arquivo]',
						id:  		'field_' + fieldName,
						allowBlank:	fieldAllowBlank,
						inputType:  'file',
						style: 		'margin-bottom:4px'
					});					
				}
				else if (fieldType == 'Texto')
				{					
					var componentField = new Ext.form.HtmlEditor({
			            name:  		'contract[' + fieldName + '_texto]',
			            id:  		'field_' + fieldName,
			            width: 		550,
			            height: 	200,
						style: 		'margin-bottom:8px'
			        });				
						
				}
				else
				{
					var componentField = new Ext.form.TextField({
						name:		   'contract[' + fieldName + '_caracter]',
						id:			   'field_' + fieldName,
						allowBlank:		fieldAllowBlank,
						cls: 'x-form-item'
					});
				}
			
				//Adiciona os campos no FormPanel
				panelFields.add(label);
				panelFields.add(componentField);
			}
		}
		
		//Primeiro cria o hidden com valor da combo
		componentValueHidden = new Ext.form.TextField({
			name:  		'contract_type_hidden',
			hidden: 	true,
			value: 		contract_type_hidden
		});

		panelFields.add(componentValueHidden);
		
		//Faz o refresh no FormPanel
		panelFields.doLayout();
		panel.add(panelFields);
		panel.doLayout();
	};
	
	function unLoadFields()
	{
		panel.remove('panelFields');
	}
	
</script>
<script type="text/javascript">
//<![CDATA[
          Ext.onReady(function(){

              Ext.QuickTips.init();

              // turn on validation errors beside the field globally
              Ext.form.Field.prototype.msgTarget = 'side';

              //var panel = new Ext.FormPanel({
              panel = new Ext.FormPanel({
                  labelWidth:   75, // label settings here cascade unless overridden
                  url:          '/contracts',
                  frame:         true,
				  enctype:		 'multipart/form-data',
				  fileUpload: 	  true,
				  isUpload: true,
                  waitMsgTarget: true,
                  title:         'Inserir Contrato',
                  bodyStyle:     'padding:5px 5px 0',
                  //width:         350,
                  //defaults:      {width: 230},
                  defaultType:   'textfield',
                  renderTo:      'contract-form',

                  
                  items: contract_form_items,

                  buttons: [ 
							{  text: 'Salvar',  type: 'submit',  handler: function(){ panel.getForm
().submit({url:'/contracts?format=ext_json', waitMsg:'Saving...', params: {tabId: '5', tabTitle: 'Inserir Contrato'}}); }},
                             {  text: 'Cancelar',  handler: function(){ panel.suspendEvents(); parent.updateTab('5', 'Inserir Contrato', '/contracts'); }}
                           ]
              });

							
			//Utility to edit the contract
		  	if (id)
		  	{
				contract_category_id = "<%=@contract.contract_category_id%>";
			    contractType  = Ext.getCmp('contract_type_id');
				
				// pupulate the contract type combo.
				contractType.setValue('');
				contractType.reset();
				contractType.setDisabled(false);
				contractType.store.load({
							params: ("id=" + contract_category_id),
							callback: function()
							{
								panel.getForm().setValues([
										{
											"value": "<%=@contract.contract_type_id%>", 
											"id": "contract_type_id"
										}
									]);
							}
				});
				
				//populate the fields panel
				fieldsStore.load({
					params: ("id=<%=@contract.contract_type_id%>"),
					callback: function(records,o,s){
						//Obtem os registros do campo
						var fields = records[0].get('fields');
						if (fields.length > 0)
						{
							loadFields(fields, "<%=@contract.contract_type_id%>");
							
							// populate the values of the fields of panel
							<%
							if (@contract != nil && @contract_names != nil)
								@contract_names.each do |row|
									field_value = @contract_values[row + "_value"]
									field_name = @contract_values[row + "_name"]
									field_type = @contract_values[row + "_type"]
							%>
							<%= "
									panelComponent =  panelFields.getComponent('field_#{field_name}');
									panelComponent.setRawValue('#{field_value}');
							" %>
								<% end %>
							<% end %>
							
						}
					}
				});	
				
				// populate form values
				panel.getForm().setValues([ 
							{
								"value": "<%=@contract.contract_category_id%>", 
								"id": "contract_category[contract_category_id]"
							}, 
							{
								"value": "<%=@contract.contract_end_date%>", 
								"id": "contract_end_date"
							}]);
				
			}
              
              
          });

//]]>
</script>
