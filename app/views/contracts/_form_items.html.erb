<%= select :contract_category, :contract_category_id,
       ContractCategory.find(:all).collect {|c| [ c.name, c.id ] },
       { :include_blank => true } %>
<% javascript_tag do -%>
	var typeStore = new Ext.data.JsonStore({
		url: '/contract_types/list_types/',  
		fields: [
			{name: 'id'},
			{name: 'document'}
		]
	});
	
	fieldsStore = new Ext.data.JsonStore({
		url: '/contract_types/list_fields/',  
		fields: [
			{name: 'fields'}
		]
	});
	
	var <%= "#{form_items}" %> = [
		{ 
			id:			   'contractCategory',
			fieldLabel:    'Categoria',
			xtype:         'combo',
			triggerAction: 'all',
			typeAhead:      true,
			forceSelection: true,
			grow: true,
			editable: 		false,
			transform:     'contract_category_contract_category_id',
			lazyRender:     true,
			listeners: {
				select: {
					fn:function()
					{
						var contractCategory = this;
						var contractType  = Ext.getCmp('contract_type_id');

						//Remove o panel com os campos
						unLoadFields();
						
						//Carrega a segunda combo.
						contractType.setValue('');
						contractType.reset();
						contractType.setDisabled(false);
						contractType.store.load({params: ("id=" + contractCategory.value)});

					}
				}
			}
		},
		{ 
			id: 		   'contract_type_id',
			fieldLabel:    'Tipo',
			xtype:         'combo',
			triggerAction: 'all',
			typeAhead:      true,
			forceSelection: true,
			width: 			350,
			grow: 			true,
			editable: 		false,
			mode: 			'local',
			valueField:		'id',
			displayField:	'document',
			store:			typeStore,
			listeners: {
				select: {
					fn:function()
					{
						//Valor do contractType
						var contract_type_hidden = this.value;
						
						//Remove o panel com os campos
						unLoadFields();
						
						//Carrega o panel com os campos
						fieldsStore.load({
							params: ("id=" + this.value),
							callback: function(records,o,s){
								//Obtem os registros do campo
								var fields = records[0].get('fields');
								if (fields.length > 0)
								{
									loadFields(fields, contract_type_hidden);
								}
							}
						});
					}
				}
			}
		}		
	];

	function loadFields(fields, contract_type_hidden){	
		//Cria outro FormPanel e o adiciona no FormPanel antigo
		panelFields = new Ext.Panel({
		  id:			 'panelFields',
		  frame:         true,
		  waitMsgTarget: true,
		  bodyStyle:     'padding:5px 5px 0',
		  layout:		 'table',
		  layoutConfig: {
				columns: 2
		    }
		});

		var fieldsTokens = fields.split( "," );

		for ( var i = 0; i < fieldsTokens.length; i++ )
		{		
			if (fieldsTokens[i] != "")
			{
				var fieldsTokensTypes = fieldsTokens[i].split( ":" );
				var fieldName = fieldsTokensTypes[0];
				var fieldType = fieldsTokensTypes[1];
				var fieldAllowBlank = (fieldsTokensTypes[2] == 'true') ? false : true;
			
				label = new Ext.form.Label({
					text:    fieldName + ": ",
					cls: 	 'x-form-item'
				});
			
				if (fieldType == 'Data')
				{
					componentField = new Ext.form.DateField({
						name:		   	'contract[' + fieldName + ']',
						allowBlank:		fieldAllowBlank,
						style: 		  	'margin-bottom:4px'
					});				
				}
				else if (fieldType == 'Arquivo')
				{					
					componentField = new Ext.form.TextField({
						name:  		'contract[' + fieldName + ']',
						allowBlank:	fieldAllowBlank,
						inputType:  'file',
						style: 		'margin-bottom:4px'
					});					
				}
				else
				{
					componentField = new Ext.form.TextField({
						name:		   'contract[' + fieldName + ']',
						allowBlank:		fieldAllowBlank,
						cls: 'x-form-item'
					});
				}
			
				//Adiciona os campos no FormPanel
				panelFields.add(label);
				panelFields.add(componentField);
			}
		}
		
		//Primeiro cria o hidden com valor da combo
		componentValueHidden = new Ext.form.TextField({
			name:  		'contract_type_hidden',
			hidden: 	true,
			value: 		contract_type_hidden
		});

		panelFields.add(componentValueHidden);
		
		//Faz o refresh no FormPanel
		panelFields.doLayout();
		panel.add(panelFields);
		panel.doLayout();
	};
	
	function unLoadFields()
	{
		panel.remove('panelFields');
	}
	
<% end -%>