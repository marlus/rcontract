<%= select :contract_category, :contract_category_id,
       ContractCategory.find(:all).collect {|c| [ c.name, c.id ] },
       { :include_blank => true } %>

<div id="indexReport" style="height:100%"></div>
<script type="text/javascript">
//<![CDATA[
	var typeStore = new Ext.data.JsonStore({
		url: '/contract_types/list_types/',  
		fields: [
			{name: 'id'},
			{name: 'document'}
		]
	});

	var user_form_items = [
		{ 
			id:			   'contractCategory',
			fieldLabel:    'Categoria',
			xtype:         'combo',
			triggerAction: 'all',
			typeAhead:      true,
			forceSelection: true,
			grow: true,
			editable: 		false,
			transform:     'contract_category_contract_category_id',
			lazyRender:     true,
			listeners: {
				select: {
					fn:function()
					{						
						var contractCategory = this;
						var contractType  = Ext.getCmp('contract_type_id');
						
						//Carrega a segunda combo.
						contractType.setValue('');
						contractType.reset();
						contractType.setDisabled(false);
						contractType.store.load({params: ("id=" + contractCategory.value)});

					}
				}
			}
		},
		{ 
			id: 		   'contract_type_id',
			fieldLabel:    'Tipo',
			xtype:         'combo',
			triggerAction: 'all',
			typeAhead:      true,
			forceSelection: true,
			width: 			350,
			grow: 			true,
			editable: 		false,
			mode: 			'local',
			valueField:		'id',
			displayField:	'document',
			store:			typeStore,
			listeners: {
				select: {
					fn:function()
					{
						//Valor do contractType
						var contract_type_hidden = this.value;
						
						//Remove o panel com os campos
						unLoadFields();
						
						//Carrega o panel com os campos
						fieldsStore.load({
							params: ("id=" + this.value),
							callback: function(records,o,s){
								//Obtem os registros do campo
								var fields = records[0].get('fields');
								if (fields.length > 0)
								{
									//loadFields(fields, contract_type_hidden);
								}
							}
						});
					}
				}
			}
		},
	    { 
		  fieldLabel:    'Criação',
		  name:          'contract_end_date',
	      xtype:         'datefield',
		  allowBlank:    'false'
	    },
	    { 
		  fieldLabel:    'Vencimento',
		  name:          'contract_end_date',
	      xtype:         'datefield',
		  allowBlank:    'false'
	    }
	];

//]]>
</script>
<script type="text/javascript">
//<![CDATA[
          Ext.onReady(function(){

              Ext.QuickTips.init();

              // turn on validation errors beside the field globally
              Ext.form.Field.prototype.msgTarget = 'side';

              //var panel = new Ext.FormPanel({
              panel = new Ext.FormPanel({
                  labelWidth:   75, // label settings here cascade unless overridden
                  url:          '/users',
                  frame:         true,
                  waitMsgTarget: true,
                  title:         'Relatorio de Contratos',
                  bodyStyle:     'padding:5px 5px 0',
                  defaultType:   'textfield',
                  renderTo:      'indexReport',

                  
                  items: user_form_items,

                  buttons: [ {  text: 'Salvar',  type: 'submit',  handler: function(){ panel.getForm().submit({url:'/users?format=ext_json', waitMsg:'Saving...', params: {tabId: '14', tabTitle: 'Inserir Usuario'}}); }},
                             {  text: 'Cancelar',  handler: function(){ panel.suspendEvents(); parent.updateTab('14', 'Inserir Usuario', '/users'); }}
                           ]
              });

              // populate form values
              panel.getForm().setValues([{"value": null, "id": "user[name]"}, {"value": null, "id": "user[updated_at]"}, {"value": null, "id": "user[username]"}, {"value": null, "id": "user[group_id]"}, {"value": null, "id": "user[password]"}, {"value": null, "id": "user[email]"}, {"value": null, "id": "user[created_at]"}]);

              
              
          });

//]]>
</script>
